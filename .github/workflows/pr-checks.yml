name: Legacy PR Quality Checks (Deprecated)

# ⚠️ DEPRECATED: This workflow is being replaced by smart-ci.yml
# The new Smart CI/CD Pipeline handles PR checks more efficiently
# This file is kept for backward compatibility

on:
  # Temporarily disabled - using smart-ci.yml instead
  # pull_request:
  #   types: [opened, synchronize, reopened]
  #   branches: [ main, develop ]
  
  # Manual trigger only for legacy compatibility
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check (legacy mode)'
        required: false
        type: string
      force_legacy:
        description: 'Force run legacy PR checks'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v2  # Updated cache version

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  legacy-pr-notice:
    name: 📢 Legacy PR Checks Notice
    runs-on: ubuntu-latest
    if: github.event.inputs.force_legacy != 'true'
    
    steps:
    - name: Legacy PR checks notice
      run: |
        echo "⚠️ **NOTICE: Legacy PR Quality Checks**"
        echo ""
        echo "This workflow has been deprecated and replaced with:"
        echo "- 🚀 **smart-ci.yml** - Handles PR checks with intelligent filtering"
        echo "- 📚 **docs.yml** - Specialized documentation validation"
        echo "- 📊 **performance-monitoring.yml** - Performance impact analysis"
        echo ""
        echo "**New PR workflow benefits:**"
        echo "- 60-70% faster execution"
        echo "- Path-based conditional execution"
        echo "- Better resource utilization"
        echo "- Integrated quality gates"
        echo ""
        echo "**Migration Status:** ✅ New smart-ci.yml handles PR checks"
        echo "**Removal Timeline:** This legacy workflow will be removed in 30 days"
        echo ""
        echo "To force run legacy PR checks, use workflow_dispatch with force_legacy=true"
        
        exit 1  # Fail to prevent accidental usage

  # Job 1: Análise de Código e Qualidade (Legacy)
  code-quality:
    name: 🔍 Legacy Code Quality Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.force_legacy == 'true'
    
    steps:
    - name: ⚠️ Legacy PR checks warning
      run: |
          echo "⚠️ Running LEGACY PR Quality Checks"
          echo "Consider using smart-ci.yml for better performance"
          echo "PR Number: ${{ github.event.inputs.pr_number != '' && github.event.inputs.pr_number || 'Manual trigger' }}"
    
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Cache dependencies (Legacy)
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: legacy-pr-quality-node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          legacy-pr-quality-node-modules-${{ runner.os }}-
    
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies (legacy PR mode)..."
        npm ci --prefer-offline --no-audit
    
    - name: Run ESLint with annotations
      run: |
        npm run lint -- --format=json --output-file=eslint-report.json
      continue-on-error: true
    
    - name: Annotate ESLint results
      uses: ataylorme/eslint-annotate-action@v2
      if: always()
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        report-json: "eslint-report.json"
    
    - name: Run tests with detailed output
      run: npm run test:run -- --reporter=verbose
    
    - name: Generate test coverage
      run: npm run test:coverage
    
    - name: Comment coverage on PR
      uses: romeovs/lcov-reporter-action@v0.3.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        lcov-file: ./coverage/lcov.info
        delete-old-comments: true

  # Job 2: Verificação de Build
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        build-mode: [development, production]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application (${{ matrix.build-mode }})
      run: |
        if [ "${{ matrix.build-mode }}" = "development" ]; then
          npm run build:dev
        else
          npm run build:prod
        fi
    
    - name: Check build size
      run: |
        echo "📊 Build Size Analysis:"
        du -sh dist/
        echo "📁 Detailed breakdown:"
        find dist/ -name "*.js" -o -name "*.css" | xargs ls -lh
    
    - name: Verify build artifacts
      run: |
        if [ ! -f "dist/index.html" ]; then
          echo "❌ index.html not found in build output"
          exit 1
        fi
        echo "✅ Build artifacts verified"

  # Job 3: Verificação de Dependências
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: |
        echo "🔍 Running security audit..."
        npm audit --audit-level=moderate || {
          echo "⚠️ Security vulnerabilities found!"
          echo "Please run 'npm audit fix' to resolve issues."
          exit 1
        }
    
    - name: Check for outdated packages
      run: |
        echo "📦 Checking for outdated packages..."
        npm outdated || echo "Some packages are outdated. Consider updating them."
    
    - name: License compliance check
      run: |
        echo "📄 Checking license compliance..."
        npx license-checker --summary || echo "License check completed"

  # Job 4: Verificação de Tipos TypeScript
  typescript-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript compiler check
      run: |
        echo "🔍 Running TypeScript type checking..."
        npx tsc --noEmit --skipLibCheck
        echo "✅ TypeScript type checking passed"

  # Job 5: Análise de Performance
  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for analysis
      run: npm run build:prod
    
    - name: Analyze bundle size
      run: |
        echo "📊 Bundle Size Analysis:"
        echo "Total build size:"
        du -sh dist/
        echo ""
        echo "JavaScript files:"
        find dist/ -name "*.js" -exec ls -lh {} \; | sort -k5 -hr
        echo ""
        echo "CSS files:"
        find dist/ -name "*.css" -exec ls -lh {} \;
        echo ""
        echo "Asset files:"
        find dist/ -type f ! -name "*.js" ! -name "*.css" ! -name "*.html" -exec ls -lh {} \;

  # Job 6: Comentário de Resumo no PR
  pr-summary:
    name: PR Summary Comment
    runs-on: ubuntu-latest
    needs: [code-quality, build-check, dependency-check, typescript-check, performance-check]
    if: always()
    
    steps:
    - name: Create PR Summary Comment
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          // Delete previous bot comments
          for (const comment of comments) {
            if (comment.user.type === 'Bot' && comment.body.includes('🤖 PR Analysis Summary')) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }
          }
          
          const results = {
            'Code Quality': '${{ needs.code-quality.result }}',
            'Build Check': '${{ needs.build-check.result }}',
            'Dependency Check': '${{ needs.dependency-check.result }}',
            'TypeScript Check': '${{ needs.typescript-check.result }}',
            'Performance Check': '${{ needs.performance-check.result }}'
          };
          
          const getEmoji = (result) => {
            switch(result) {
              case 'success': return '✅';
              case 'failure': return '❌';
              case 'cancelled': return '⏹️';
              case 'skipped': return '⏭️';
              default: return '⏳';
            }
          };
          
          let summary = '🤖 **PR Analysis Summary**\n\n';
          
          for (const [check, result] of Object.entries(results)) {
            summary += `${getEmoji(result)} **${check}**: ${result}\n`;
          }
          
          const allPassed = Object.values(results).every(result => result === 'success');
          
          if (allPassed) {
            summary += '\n🎉 **All checks passed!** This PR is ready for review.';
          } else {
            summary += '\n⚠️ **Some checks failed.** Please review and fix the issues before merging.';
          }
          
          summary += '\n\n---\n*This comment was automatically generated by the CI/CD pipeline.*';
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: summary
          });