name: Smart CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'vite.config.ts'
      - 'tsconfig*.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'vite.config.ts'
      - 'tsconfig*.json'

permissions:
  contents: write
  packages: write
  pull-requests: write
  checks: write

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v1

jobs:
  # Job de Detecção Inteligente de Mudanças
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      deps: ${{ steps.changes.outputs.deps }}
      config: ${{ steps.changes.outputs.config }}
      tests: ${{ steps.changes.outputs.tests }}
      workflows: ${{ steps.changes.outputs.workflows }}
      skip-build: ${{ steps.skip-check.outputs.skip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'src/**/*.{ts,tsx,js,jsx}'
              - 'public/**'
            deps:
              - 'package*.json'
            config:
              - 'vite.config.ts'
              - 'tsconfig*.json'
              - '.env*'
              - 'tailwind.config.js'
              - 'postcss.config.js'
            tests:
              - 'src/**/*.test.{ts,tsx}'
              - 'src/**/__tests__/**'
              - 'vitest.config.ts'
            workflows:
              - '.github/workflows/**'
      
      - name: Check for skip conditions
        id: skip-check
        run: |
          # Skip build for documentation-only changes
          if [[ "${{ github.event.head_commit.message }}" == *"[skip ci]"* ]] || \
             [[ "${{ github.event.head_commit.message }}" == *"docs:"* ]] || \
             [[ "${{ github.event.head_commit.message }}" == *"chore:"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  # Job Combinado: Qualidade + Testes (Otimizado)
  quality-tests:
    name: ⚡ Quality & Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.skip-build == 'false' && 
      (needs.detect-changes.outputs.src == 'true' || 
       needs.detect-changes.outputs.deps == 'true' || 
       needs.detect-changes.outputs.tests == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js with enhanced caching
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
    
    - name: Install dependencies (conditional)
      run: |
        if [ ! -d "node_modules" ] || [ "${{ needs.detect-changes.outputs.deps }}" == "true" ]; then
          npm ci --prefer-offline --no-audit
        else
          echo "Using cached node_modules"
        fi
    
    # Execução paralela de verificações rápidas
    - name: Run parallel lint and type checks
      run: |
        echo "🔍 Running parallel checks..."
        npm run lint --silent &
        LINT_PID=$!
        
        npx tsc --noEmit --skipLibCheck &
        TSC_PID=$!
        
        # Wait for both processes
        wait $LINT_PID
        LINT_EXIT=$?
        
        wait $TSC_PID
        TSC_EXIT=$?
        
        if [ $LINT_EXIT -ne 0 ] || [ $TSC_EXIT -ne 0 ]; then
          echo "❌ Lint or TypeScript check failed"
          exit 1
        fi
        
        echo "✅ All checks passed"
    
    - name: Run tests with smart coverage
      run: |
        if [ "${{ needs.detect-changes.outputs.tests }}" == "true" ] || [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "🧪 Running full test suite with coverage..."
          npm run test:coverage
        else
          echo "🧪 Running quick tests..."
          npm run test:run
        fi
    
    - name: Upload coverage (conditional)
      if: needs.detect-changes.outputs.tests == 'true' || github.event_name == 'pull_request'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        flags: unittests

  # Build Inteligente e Otimizado
  smart-build:
    name: 🏗️ Smart Build
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-tests]
    if: |
      needs.detect-changes.outputs.skip-build == 'false' && 
      (needs.detect-changes.outputs.src == 'true' || 
       needs.detect-changes.outputs.config == 'true')
    
    strategy:
      fail-fast: true
      matrix:
        build-type: ${{ github.event_name == 'pull_request' && fromJSON('["development"]') || fromJSON('["development", "production"]') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Restore node_modules cache
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Build application
      run: |
        echo "🏗️ Building for ${{ matrix.build-type }}..."
        if [ "${{ matrix.build-type }}" = "production" ]; then
          npm run build:prod
        else
          npm run build:dev
        fi
    
    - name: Analyze build performance
      run: |
        echo "📊 Build Analysis (${{ matrix.build-type }}):"
        
        # Calculate build size
        BUILD_SIZE=$(du -sb dist/ | cut -f1)
        BUILD_SIZE_MB=$((BUILD_SIZE / 1024 / 1024))
        
        echo "Total size: ${BUILD_SIZE_MB}MB"
        
        # Detailed breakdown
        echo "📁 File breakdown:"
        find dist/ -name "*.js" -exec ls -lh {} \; | sort -k5 -hr | head -5
        find dist/ -name "*.css" -exec ls -lh {} \;
        
        # Performance warnings
        if [ "${{ matrix.build-type }}" = "production" ]; then
          if [ $BUILD_SIZE_MB -gt 15 ]; then
            echo "⚠️ WARNING: Production build is larger than 15MB"
            echo "Consider code splitting or asset optimization"
          elif [ $BUILD_SIZE_MB -gt 10 ]; then
            echo "💡 INFO: Build size is getting large (${BUILD_SIZE_MB}MB)"
          else
            echo "✅ Build size is optimal (${BUILD_SIZE_MB}MB)"
          fi
        fi
    
    - name: Upload production artifacts
      if: matrix.build-type == 'production' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: production-build-${{ github.sha }}
        path: dist/
        retention-days: 7
        compression-level: 9

  # Auditoria de Segurança Inteligente
  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.deps == 'true' || 
      github.event_name == 'schedule' ||
      contains(github.event.head_commit.message, '[security]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
    
    - name: Run security audit
      run: |
        echo "🔍 Running security audit..."
        
        # Run audit and capture output
        if ! npm audit --audit-level=moderate --json > audit-results.json 2>&1; then
          echo "⚠️ Security vulnerabilities found!"
          
          # Parse and display critical/high vulnerabilities
          if command -v jq &> /dev/null; then
            echo "Critical vulnerabilities:"
            jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "critical" or .value.severity == "high") | "\(.key): \(.value.severity)"' audit-results.json || true
          fi
          
          # Don't fail on moderate vulnerabilities in development
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "⚠️ Non-blocking: Vulnerabilities found in development branch"
            exit 0
          else
            echo "❌ Blocking: Vulnerabilities found in main branch"
            exit 1
          fi
        else
          echo "✅ No security vulnerabilities found"
        fi
    
    - name: Check outdated packages
      run: |
        echo "📦 Checking for outdated packages..."
        npm outdated --json > outdated.json || true
        
        if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
          echo "📋 Outdated packages found - consider updating"
        else
          echo "✅ All packages are up to date"
        fi

  # Deploy Condicional e Otimizado
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-tests, smart-build]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') &&
      needs.detect-changes.outputs.skip-build == 'false' &&
      (needs.detect-changes.outputs.src == 'true' || needs.detect-changes.outputs.config == 'true')
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download production build
      if: github.ref == 'refs/heads/main'
      uses: actions/download-artifact@v4
      with:
        name: production-build-${{ github.sha }}
        path: dist/
    
    - name: Setup Node.js for staging build
      if: github.ref == 'refs/heads/develop'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Build for staging
      if: github.ref == 'refs/heads/develop'
      run: |
        npm ci --prefer-offline --no-audit
        npm run build:dev
    
    - name: Deploy to Vercel
      id: deploy
      run: |
        echo "🚀 Deploying to ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}..."
        
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          DEPLOY_URL=$(npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --confirm 2>&1 | grep -o 'https://[^[:space:]]*')
        else
          DEPLOY_URL=$(npx vercel --token=${{ secrets.VERCEL_TOKEN }} --confirm 2>&1 | grep -o 'https://[^[:space:]]*')
        fi
        
        echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
        echo "✅ Deployed to: $DEPLOY_URL"
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    - name: Create release (production only)
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          🚀 **Automated Production Release**
          
          **Deployment URL:** ${{ steps.deploy.outputs.url }}
          
          **Changes:**
          ${{ github.event.head_commit.message }}
          
          **Commit:** ${{ github.sha }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  # Notificação Inteligente
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [detect-changes, quality-tests, smart-build, security-audit, deploy]
    if: always() && needs.detect-changes.outputs.skip-build == 'false'
    
    steps:
    - name: Calculate workflow efficiency
      run: |
        echo "📊 Workflow Efficiency Report:"
        echo "- Changes detected: ${{ needs.detect-changes.result }}"
        echo "- Quality & Tests: ${{ needs.quality-tests.result }}"
        echo "- Build: ${{ needs.smart-build.result }}"
        echo "- Security: ${{ needs.security-audit.result }}"
        echo "- Deploy: ${{ needs.deploy.result }}"
        
        # Calculate skipped jobs
        TOTAL_JOBS=5
        SKIPPED=0
        
        if [ "${{ needs.quality-tests.result }}" = "skipped" ]; then SKIPPED=$((SKIPPED + 1)); fi
        if [ "${{ needs.smart-build.result }}" = "skipped" ]; then SKIPPED=$((SKIPPED + 1)); fi
        if [ "${{ needs.security-audit.result }}" = "skipped" ]; then SKIPPED=$((SKIPPED + 1)); fi
        if [ "${{ needs.deploy.result }}" = "skipped" ]; then SKIPPED=$((SKIPPED + 1)); fi
        
        EFFICIENCY=$((SKIPPED * 100 / TOTAL_JOBS))
        echo "⚡ Efficiency: ${EFFICIENCY}% of jobs were intelligently skipped"
    
    - name: Success notification
      if: |
        needs.quality-tests.result == 'success' && 
        (needs.smart-build.result == 'success' || needs.smart-build.result == 'skipped') &&
        (needs.security-audit.result == 'success' || needs.security-audit.result == 'skipped')
      run: |
        echo "✅ **Pipeline Success!**"
        echo "All critical checks passed. Ready for review/deployment."
    
    - name: Failure notification
      if: |
        needs.quality-tests.result == 'failure' || 
        needs.smart-build.result == 'failure' || 
        needs.security-audit.result == 'failure' ||
        needs.deploy.result == 'failure'
      run: |
        echo "❌ **Pipeline Failed!**"
        echo "Please check the failed jobs and fix the issues."
        exit 1