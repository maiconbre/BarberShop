name: Scheduled Security & Maintenance Audit

on:
  schedule:
    # Executa toda segunda-feira às 2h UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:  # Permite execução manual
    inputs:
      audit_level:
        description: 'Security audit level'
        required: false
        default: 'moderate'
        type: choice
        options:
          - low
          - moderate
          - high
          - critical
      force_update:
        description: 'Force dependency updates'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

jobs:
  comprehensive-audit:
    name: 🔍 Comprehensive Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline
    
    - name: Run comprehensive security audit
      id: audit
      run: |
          echo "🔍 Running comprehensive security audit..."
          
          AUDIT_LEVEL="${{ github.event.inputs.audit_level != '' && github.event.inputs.audit_level || 'moderate' }}"
        echo "Audit level: $AUDIT_LEVEL"
        
        # Create audit report
        echo "# Security Audit Report - $(date)" > audit-report.md
        echo "" >> audit-report.md
        
        # Run npm audit
        echo "## NPM Security Audit" >> audit-report.md
        echo "" >> audit-report.md
        
        if npm audit --audit-level=$AUDIT_LEVEL --json > npm-audit.json 2>&1; then
          echo "✅ No security vulnerabilities found at $AUDIT_LEVEL level" >> audit-report.md
          echo "audit_status=clean" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Security vulnerabilities found!" >> audit-report.md
          echo "audit_status=vulnerabilities" >> $GITHUB_OUTPUT
          
          # Parse vulnerabilities if jq is available
          if command -v jq &> /dev/null; then
            echo "" >> audit-report.md
            echo "### Critical/High Vulnerabilities:" >> audit-report.md
            jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "critical" or .value.severity == "high") | "- **\(.key)**: \(.value.severity) - \(.value.title)"' npm-audit.json >> audit-report.md || true
          fi
        fi
        
        echo "" >> audit-report.md
    
    - name: Check outdated packages
      run: |
        echo "📦 Checking for outdated packages..."
        
        echo "## Outdated Packages" >> audit-report.md
        echo "" >> audit-report.md
        
        if npm outdated --json > outdated.json 2>/dev/null && [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
          echo "📋 Outdated packages found" >> audit-report.md
          echo "" >> audit-report.md
          
          # Parse outdated packages
          if command -v jq &> /dev/null; then
            echo "| Package | Current | Wanted | Latest |" >> audit-report.md
            echo "|---------|---------|--------|--------|" >> audit-report.md
            jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) |"' outdated.json >> audit-report.md || true
          fi
        else
          echo "✅ All packages are up to date" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
    
    - name: License compliance check
      run: |
        echo "📄 Checking license compliance..."
        
        echo "## License Compliance" >> audit-report.md
        echo "" >> audit-report.md
        
        # Install license-checker if not present
        if ! command -v license-checker &> /dev/null; then
          npm install -g license-checker
        fi
        
        # Check licenses
        if license-checker --summary --json > licenses.json 2>/dev/null; then
          echo "✅ License check completed" >> audit-report.md
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL" "AGPL" "LGPL" "CPAL" "EPL")
          
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -qi "$license" licenses.json; then
              echo "⚠️ Potentially problematic license found: $license" >> audit-report.md
            fi
          done
        else
          echo "❌ License check failed" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
    
    - name: Dependency analysis
      run: |
        echo "🔗 Analyzing dependencies..."
        
        echo "## Dependency Analysis" >> audit-report.md
        echo "" >> audit-report.md
        
        # Count dependencies
        PROD_DEPS=$(jq '.dependencies | length' package.json 2>/dev/null || echo "0")
        DEV_DEPS=$(jq '.devDependencies | length' package.json 2>/dev/null || echo "0")
        TOTAL_DEPS=$((PROD_DEPS + DEV_DEPS))
        
        echo "- Production dependencies: $PROD_DEPS" >> audit-report.md
        echo "- Development dependencies: $DEV_DEPS" >> audit-report.md
        echo "- Total dependencies: $TOTAL_DEPS" >> audit-report.md
        echo "" >> audit-report.md
        
        # Check for large dependencies
        echo "### Large Dependencies (>1MB):" >> audit-report.md
        du -sh node_modules/* 2>/dev/null | awk '$1 ~ /[0-9]+M/ && $1 !~ /^[0-9]\.[0-9]M/ {print "- " $2 ": " $1}' >> audit-report.md || true
        
        echo "" >> audit-report.md
    
    - name: Performance metrics
      run: |
        echo "⚡ Collecting performance metrics..."
        
        echo "## Performance Metrics" >> audit-report.md
        echo "" >> audit-report.md
        
        # Build size analysis
        if npm run build:prod > /dev/null 2>&1; then
          BUILD_SIZE=$(du -sh dist/ 2>/dev/null | cut -f1 || echo "Unknown")
          echo "- Production build size: $BUILD_SIZE" >> audit-report.md
          
          # Count files
          JS_FILES=$(find dist/ -name "*.js" 2>/dev/null | wc -l || echo "0")
          CSS_FILES=$(find dist/ -name "*.css" 2>/dev/null | wc -l || echo "0")
          
          echo "- JavaScript files: $JS_FILES" >> audit-report.md
          echo "- CSS files: $CSS_FILES" >> audit-report.md
        else
          echo "❌ Build failed - unable to analyze build size" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
    
    - name: Create or update security issue
      if: steps.audit.outputs.audit_status == 'vulnerabilities'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const auditReport = fs.readFileSync('audit-report.md', 'utf8');
          
          // Check if there's already an open security issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'security,automated',
            state: 'open'
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('🚨 Automated Security Audit')
          );
          
          const issueBody = `${auditReport}
          
          ---
          
          **Actions Required:**
          1. Review the vulnerabilities listed above
          2. Run \`npm audit fix\` to automatically fix issues
          3. For manual fixes, update the affected packages
          4. Test the application after updates
          
          **Auto-generated on:** ${new Date().toISOString()}
          **Audit Level:** ${{ github.event.inputs.audit_level != '' && github.event.inputs.audit_level || 'moderate' }}`;
          
          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: issueBody
            });
            
            // Add comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: '🔄 **Security audit updated** - New vulnerabilities detected or audit re-run.'
            });
          } else {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Automated Security Audit - Vulnerabilities Detected',
              body: issueBody,
              labels: ['security', 'automated', 'high-priority']
            });
          }
    
    - name: Auto-fix dependencies (if enabled)
      if: github.event.inputs.force_update == 'true'
      run: |
        echo "🔧 Attempting to auto-fix dependencies..."
        
        # Create a new branch for fixes
        BRANCH_NAME="automated-security-fixes-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Try to fix vulnerabilities
        if npm audit fix --force; then
          # Check if there are changes
          if git diff --quiet; then
            echo "No changes made by npm audit fix"
          else
            # Commit changes
            git add package*.json
            git commit -m "🔒 Auto-fix security vulnerabilities
            
            - Applied npm audit fix
            - Automated security maintenance
            - Generated by scheduled audit workflow"
            
            # Push branch
            git push origin $BRANCH_NAME
            
            # Create PR
            gh pr create \
              --title "🔒 Automated Security Fixes" \
              --body "This PR contains automated security fixes generated by the scheduled audit workflow.
              
              **Changes:**
              - Applied \`npm audit fix\`
              - Updated vulnerable dependencies
              
              **Please review and test before merging.**" \
              --label "security,automated" \
              --base main
          fi
        else
          echo "❌ npm audit fix failed - manual intervention required"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload audit artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report-${{ github.run_number }}
        path: |
          audit-report.md
          npm-audit.json
          outdated.json
          licenses.json
        retention-days: 30
    
    - name: Summary
      run: |
        echo "📊 **Audit Summary:**"
        echo "- Status: ${{ steps.audit.outputs.audit_status }}"
        echo "- Report generated: audit-report.md"
        echo "- Artifacts uploaded for 30 days retention"
        
        if [ "${{ steps.audit.outputs.audit_status }}" = "vulnerabilities" ]; then
          echo "⚠️ Action required: Security vulnerabilities found"
        else
          echo "✅ No security issues detected"
        fi