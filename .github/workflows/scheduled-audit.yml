name: Scheduled Security & Maintenance Audit

on:
  schedule:
    # Executa toda segunda-feira √†s 2h UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:  # Permite execu√ß√£o manual
    inputs:
      audit_level:
        description: 'Security audit level'
        required: false
        default: 'moderate'
        type: choice
        options:
          - low
          - moderate
          - high
          - critical
      force_update:
        description: 'Force dependency updates'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

jobs:
  comprehensive-audit:
    name: üîç Comprehensive Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline
    
    - name: Run comprehensive security audit
      id: audit
      run: |
        echo "üîç Running comprehensive security audit..."
        
        AUDIT_LEVEL="${{ github.event.inputs.audit_level != '' && github.event.inputs.audit_level || 'moderate' }}"
        echo "Audit level: $AUDIT_LEVEL"
        
        # Create audit report
        echo "# Security Audit Report - $(date)" > audit-report.md
        echo "" >> audit-report.md
    
    - name: Check outdated packages
      run: |
        echo "üì¶ Checking for outdated packages..."
        
        echo "## Outdated Packages" >> audit-report.md
        echo "" >> audit-report.md
        
        if npm outdated --json > outdated.json 2>/dev/null && [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
          echo "üìã Outdated packages found" >> audit-report.md
          echo "" >> audit-report.md
          
          # Parse outdated packages
          if command -v jq &> /dev/null; then
            echo "| Package | Current | Wanted | Latest |" >> audit-report.md
            echo "|---------|---------|--------|--------|" >> audit-report.md
            jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) |"' outdated.json >> audit-report.md || true
          fi
        else
          echo "‚úÖ All packages are up to date" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
    
    - name: License compliance check
      run: |
        echo "üìÑ Checking license compliance..."
        
        echo "## License Compliance" >> audit-report.md
        echo "" >> audit-report.md
        
        # Install license-checker if not present
        if ! command -v license-checker &> /dev/null; then
          npm install -g license-checker
        fi
        
        # Check licenses
        if license-checker --summary --json > licenses.json 2>/dev/null; then
          echo "‚úÖ License check completed" >> audit-report.md
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL" "AGPL" "LGPL" "CPAL" "EPL")
          
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -qi "$license" licenses.json; then
              echo "‚ö†Ô∏è Potentially problematic license found: $license" >> audit-report.md
            fi
          done
        else
          echo "‚ùå License check failed" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
    
    - name: Dependency analysis
      run: |
        echo "üîó Analyzing dependencies..."
        
        echo "## Dependency Analysis" >> audit-report.md
        echo "" >> audit-report.md
        
        # Count dependencies
        PROD_DEPS=$(jq '.dependencies | length' package.json 2>/dev/null || echo "0")
        DEV_DEPS=$(jq '.devDependencies | length' package.json 2>/dev/null || echo "0")
        TOTAL_DEPS=$((PROD_DEPS + DEV_DEPS))
        
        echo "- Production dependencies: $PROD_DEPS" >> audit-report.md
        echo "- Development dependencies: $DEV_DEPS" >> audit-report.md
        echo "- Total dependencies: $TOTAL_DEPS" >> audit-report.md
        echo "" >> audit-report.md
        
        # Check for large dependencies
        echo "### Large Dependencies (>1MB):" >> audit-report.md
        du -sh node_modules/* 2>/dev/null | awk '$1 ~ /[0-9]+M/ && $1 !~ /^[0-9]\.[0-9]M/ {print "- " $2 ": " $1}' >> audit-report.md || true
        
        echo "" >> audit-report.md
    
    - name: Performance metrics
      run: |
        echo "‚ö° Collecting performance metrics..."
        
        echo "## Performance Metrics" >> audit-report.md
        echo "" >> audit-report.md
        
        # Build size analysis
        if npm run build:prod > /dev/null 2>&1; then
          BUILD_SIZE=$(du -sh dist/ 2>/dev/null | cut -f1 || echo "Unknown")
          echo "- Production build size: $BUILD_SIZE" >> audit-report.md
          
          # Count files
          JS_FILES=$(find dist/ -name "*.js" 2>/dev/null | wc -l || echo "0")
          CSS_FILES=$(find dist/ -name "*.css" 2>/dev/null | wc -l || echo "0")
          
          echo "- JavaScript files: $JS_FILES" >> audit-report.md
          echo "- CSS files: $CSS_FILES" >> audit-report.md
        else
          echo "‚ùå Build failed - unable to analyze build size" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
    

    
    - name: Notify Discord with Audit Report
      if: always()
      run: |
        REPORT_CONTENT=$(cat audit-report.md)
        WEBHOOK_URL="https://discord.com/api/webhooks/1403080159539757086/jPd738BY7oID9oQSH4VCmb3taAlJjOi_rFZZPXGztWkirhMwnqB-IwjuWnTqfS3ReZ6r"
        
        # Escape newlines and double quotes for JSON payload
        ESCAPED_REPORT_CONTENT=$(echo "$REPORT_CONTENT" | sed -z 's/\n/\\n/g' | sed 's/"/\\"/g')

        # Truncate content if too long for Discord (max 4096 characters per embed description)
        if [ ${#ESCAPED_REPORT_CONTENT} -gt 4000 ]; then
          ESCAPED_REPORT_CONTENT="${ESCAPED_REPORT_CONTENT:0:4000}... (truncated)"
        fi

        PAYLOAD='{
          "username": "Notify Bot Github",
          "embeds": [
            {
              "title": "üîç Relat√≥rio de Auditoria de Seguran√ßa",
              "description": "```markdown\n'"$ESCAPED_REPORT_CONTENT"'\n```",
              "color": 3447003,
              "footer": {
                "text": "BarberShop Audit | Run #${{ github.run_number }}",
                "icon_url": "https://avatars.githubusercontent.com/u/123456789?s=200&v=4" 
              },
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
            }
          ]
        }'
        
        curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" $WEBHOOK_URL

    - name: Auto-fix dependencies (if enabled)
      if: github.event.inputs.force_update == 'true'
      run: |
        echo "üîß Attempting to auto-fix dependencies..."
        
        # Create a new branch for fixes
        BRANCH_NAME="automated-security-fixes-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Try to fix vulnerabilities
        if npm audit fix --force; then
          # Check if there are changes
          if git diff --quiet; then
            echo "No changes made by npm audit fix"
          else
            # Commit changes
            git add package*.json
            git commit -m "üîí Auto-fix security vulnerabilities
            
            - Applied npm audit fix
            - Automated security maintenance
            - Generated by scheduled audit workflow"
            
            # Push branch
            git push origin $BRANCH_NAME
            
            # Create PR
            gh pr create \
              --title "üîí Automated Security Fixes" \
              --body "This PR contains automated security fixes generated by the scheduled audit workflow.
              
              **Changes:**
              - Applied \`npm audit fix\`
              - Updated vulnerable dependencies
              
              **Please review and test before merging.**" \
              --label "security,automated" \
              --base main
          fi
        else
          echo "‚ùå npm audit fix failed - manual intervention required"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload audit artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report-${{ github.run_number }}
        path: |
          audit-report.md
          npm-audit.json
          outdated.json
          licenses.json
        retention-days: 30
    
    - name: Summary
      run: |
        echo "üìä **Audit Summary:**"
        echo "- Status: ${{ steps.audit.outputs.audit_status }}"
        echo "- Report generated: audit-report.md"
        echo "- Artifacts uploaded for 30 days retention"
        
        if [ "${{ steps.audit.outputs.audit_status }}" = "vulnerabilities" ]; then
          echo "‚ö†Ô∏è Action required: Security vulnerabilities found"
        else
          echo "‚úÖ No security issues detected"
        fi

        
    - name: üì¢ Send Discord Report
    runs-on: ubuntu-latest
    needs: [collect-metrics, performance-alerts, benchmark-comparison, summary]
    if: always()
    
    steps:
    - name: Download performance artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: performance-metrics-*
        merge-multiple: true
      continue-on-error: true
    
    - name: Download benchmark artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: benchmark-results-*
        merge-multiple: true
      continue-on-error: true
    
    - name: Prepare Discord notification
      id: prepare
      run: |
        # Get workflow status
        METRICS_STATUS="${{ needs.collect-metrics.result }}"
        ALERTS_STATUS="${{ needs.performance-alerts.result }}"
        BENCHMARK_STATUS="${{ needs.benchmark-comparison.result }}"
        PERFORMANCE_TREND="${{ needs.collect-metrics.outputs.performance-trend }}"
        
        # Set status emoji and color
        case "$PERFORMANCE_TREND" in
          "excellent")
            STATUS_EMOJI="üöÄ"
            STATUS_COLOR="3066993"  # Green
            STATUS_TEXT="Excellent Performance"
            ;;
          "good")
            STATUS_EMOJI="‚úÖ"
            STATUS_COLOR="15844367"  # Gold
            STATUS_TEXT="Good Performance"
            ;;
          "needs-improvement")
            STATUS_EMOJI="‚ö†Ô∏è"
            STATUS_COLOR="16776960"  # Yellow
            STATUS_TEXT="Needs Improvement"
            ;;
          "poor")
            STATUS_EMOJI="‚ùå"
            STATUS_COLOR="15158332"  # Red
            STATUS_TEXT="Poor Performance"
            ;;
          *)
            STATUS_EMOJI="üìä"
            STATUS_COLOR="7506394"  # Blue
            STATUS_TEXT="Performance Analysis"
            ;;
        esac
        
        echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
        echo "status_color=$STATUS_COLOR" >> $GITHUB_OUTPUT
        echo "status_text=$STATUS_TEXT" >> $GITHUB_OUTPUT
        
        # Parse metrics if available
        TOTAL_RUNS="N/A"
        SUCCESS_RATE="N/A"
        AVG_DURATION="N/A"
        CACHE_HIT_RATE="N/A"
        
        if [ -f "performance-metrics.json" ]; then
          TOTAL_RUNS=$(jq -r '.total_runs // "N/A"' performance-metrics.json)
          SUCCESS_RATE=$(jq -r '.success_rate // "N/A"' performance-metrics.json)
          AVG_DURATION=$(jq -r '.average_duration // "N/A"' performance-metrics.json)
          CACHE_HIT_RATE=$(jq -r '.cache_hit_rate // "N/A"' performance-metrics.json)
          
          if [ "$AVG_DURATION" != "N/A" ]; then
            AVG_DURATION_MIN=$((AVG_DURATION / 60))
            AVG_DURATION_SEC=$((AVG_DURATION % 60))
            AVG_DURATION="${AVG_DURATION_MIN}m ${AVG_DURATION_SEC}s"
          fi
        fi
        
        echo "total_runs=$TOTAL_RUNS" >> $GITHUB_OUTPUT
        echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
        echo "avg_duration=$AVG_DURATION" >> $GITHUB_OUTPUT
        echo "cache_hit_rate=$CACHE_HIT_RATE" >> $GITHUB_OUTPUT
        
        # Get benchmark results if available
        BENCHMARK_TOTAL="N/A"
        BENCHMARK_STATUS_TEXT="Not Available"
        
        if [ -f "benchmark-results.md" ]; then
          # Try to extract total time from benchmark results
          BENCHMARK_TOTAL=$(grep "Total Pipeline" benchmark-results.md | grep -o '[0-9]\+s' | head -1 || echo "N/A")
          
          if grep -q "Excellent Performance" benchmark-results.md; then
            BENCHMARK_STATUS_TEXT="üöÄ Excellent"
          elif grep -q "Good Performance" benchmark-results.md; then
            BENCHMARK_STATUS_TEXT="‚úÖ Good"
          elif grep -q "Moderate Performance" benchmark-results.md; then
            BENCHMARK_STATUS_TEXT="‚ö†Ô∏è Moderate"
          elif grep -q "Poor Performance" benchmark-results.md; then
            BENCHMARK_STATUS_TEXT="‚ùå Poor"
          fi
        fi
        
        echo "benchmark_total=$BENCHMARK_TOTAL" >> $GITHUB_OUTPUT
        echo "benchmark_status=$BENCHMARK_STATUS_TEXT" >> $GITHUB_OUTPUT
    
    - name: Send Discord notification
      uses: actions/github-script@v6
      with:
        script: |
          const webhook_url = "https://discord.com/api/webhooks/1403080159539757086/jPd738BY7oID9oQSH4VCmb3taAlJjOi_rFZZPXGztWkirhMwnqB-IwjuWnTqfS3ReZ6r";
          
          // Get step outputs
          const statusEmoji = "${{ steps.prepare.outputs.status_emoji }}";
          const statusColor = parseInt("${{ steps.prepare.outputs.status_color }}");
          const statusText = "${{ steps.prepare.outputs.status_text }}";
          const totalRuns = "${{ steps.prepare.outputs.total_runs }}";
          const successRate = "${{ steps.prepare.outputs.success_rate }}";
          const avgDuration = "${{ steps.prepare.outputs.avg_duration }}";
          const cacheHitRate = "${{ steps.prepare.outputs.cache_hit_rate }}";
          const benchmarkTotal = "${{ steps.prepare.outputs.benchmark_total }}";
          const benchmarkStatus = "${{ steps.prepare.outputs.benchmark_status }}";
          
          // Build recommendations based on performance
          const trend = "${{ needs.collect-metrics.outputs.performance-trend }}";
          let recommendations = [];
          
          if (trend === "poor" || trend === "needs-improvement") {
            recommendations = [
              "üîç **Review Failed Workflows** - Identify and fix failing jobs",
              "‚ö° **Optimize Cache Strategy** - Improve dependency caching",
              "üèÉ‚Äç‚ôÇÔ∏è **Parallelize Jobs** - Run independent tasks concurrently",
              "üì¶ **Optimize Dependencies** - Review and clean up package.json",
              "üß™ **Optimize Tests** - Parallelize or optimize slow test suites"
            ];
          } else if (trend === "good") {
            recommendations = [
              "üìä **Monitor Trends** - Keep tracking performance metrics",
              "üîß **Fine-tune Caching** - Optimize cache hit rates further",
              "üöÄ **Consider Upgrades** - Evaluate new GitHub Actions features"
            ];
          } else if (trend === "excellent") {
            recommendations = [
              "üéâ **Maintain Excellence** - Keep current optimization practices",
              "üìà **Share Best Practices** - Document successful optimizations",
              "üîÑ **Regular Reviews** - Continue monitoring for regressions"
            ];
          }
          
          const embed = {
            title: `${statusEmoji} CI/CD Performance Report`,
            description: `**Status:** ${statusText}\n**Repository:** ${context.repo.owner}/${context.repo.repo}`,
            color: statusColor,
            timestamp: new Date().toISOString(),
            fields: [
              {
                name: "üìä Metrics Overview",
                value: `**Total Runs:** ${totalRuns}\n**Success Rate:** ${successRate}%\n**Avg Duration:** ${avgDuration}\n**Cache Hit Rate:** ${cacheHitRate}%`,
                inline: true
              },
              {
                name: "üèÉ‚Äç‚ôÇÔ∏è Benchmark Results",
                value: `**Status:** ${benchmarkStatus}\n**Total Time:** ${benchmarkTotal}\n**Target:** <5 minutes`,
                inline: true
              },
              {
                name: "üìà Analysis Period",
                value: `**Range:** ${{ github.event.inputs.time_range || '7d' }}\n**Type:** ${{ github.event.inputs.metric_type || 'all' }}\n**Workflow:** #${{ github.run_number }}`,
                inline: true
              }
            ],
            footer: {
              text: "Performance Monitoring ‚Ä¢ Auto-generated",
              icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            }
          };
          
          // Add recommendations field if there are any
          if (recommendations.length > 0) {
            embed.fields.push({
              name: "üéØ Optimization Recommendations",
              value: recommendations.slice(0, 5).join("\n"),
              inline: false
            });
          }
          
          // Add status indicators
          const statusIndicators = [];
          if (trend === "excellent" || trend === "good") {
            statusIndicators.push("‚úÖ Performance within targets");
          }
          if (trend === "needs-improvement") {
            statusIndicators.push("‚ö†Ô∏è Performance degradation detected");
          }
          if (trend === "poor") {
            statusIndicators.push("üö® Critical performance issues");
          }
          
          if (statusIndicators.length > 0) {
            embed.fields.push({
              name: "üîî Status Alerts",
              value: statusIndicators.join("\n"),
              inline: false
            });
          }
          
          // Add quick actions
          const quickActions = [
            `[üìä View Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
            `[üìã Download Metrics](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}#artifacts)`,
            `[üîç Repository Actions](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)`
          ];
          
          embed.fields.push({
            name: "üîó Quick Actions",
            value: quickActions.join(" ‚Ä¢ "),
            inline: false
          });
          
          const payload = {
            username: "CI/CD Monitor",
            avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            embeds: [embed]
          };
          
          try {
            const response = await fetch(webhook_url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload)
            });
            
            if (!response.ok) {
              throw new Error(`Discord webhook failed: ${response.status} ${response.statusText}`);
            }
            
            console.log("‚úÖ Discord notification sent successfully");
          } catch (error) {
            console.error("‚ùå Failed to send Discord notification:", error);
            core.setFailed(`Discord notification failed: ${error.message}`);
          }