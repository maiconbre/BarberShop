name: Scheduled Security & Maintenance Audit

on:
  schedule:
    # Executa toda segunda-feira às 2h UTC
    - cron: '0 2 * * 1'
  workflow_dispatch:  # Permite execução manual
    inputs:
      audit_level:
        description: 'Security audit level'
        required: false
        default: 'moderate'
        type: choice
        options:
          - low
          - moderate
          - high
          - critical
      force_update:
        description: 'Force dependency updates'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  issues: write
  pull-requests: write
  security-events: write

jobs:
  comprehensive-audit:
    name: 🔍 Comprehensive Security Audit
    runs-on: ubuntu-latest
    
    outputs:
      audit-status: ${{ steps.audit.outputs.audit_status }}
      vulnerabilities-found: ${{ steps.audit.outputs.vulnerabilities_found }}
      outdated-packages: ${{ steps.audit.outputs.outdated_packages }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline
    
    - name: Run NPM Security Audit
      id: audit
      run: |
        echo "🔍 Running comprehensive security audit..."
        
        AUDIT_LEVEL="${{ github.event.inputs.audit_level != '' && github.event.inputs.audit_level || 'moderate' }}"
        echo "Audit level: $AUDIT_LEVEL"
        
        # Create audit report
        echo "# Security Audit Report - $(date)" > audit-report.md
        echo "" >> audit-report.md
        echo "**Audit Level:** $AUDIT_LEVEL" >> audit-report.md
        echo "**Repository:** ${{ github.repository }}" >> audit-report.md
        echo "**Workflow Run:** #${{ github.run_number }}" >> audit-report.md
        echo "" >> audit-report.md
        
        # Run npm audit and capture results
        echo "## 🔒 Security Vulnerabilities" >> audit-report.md
        echo "" >> audit-report.md
        
        if npm audit --json > npm-audit.json 2>/dev/null; then
          AUDIT_EXIT_CODE=0
        else
          AUDIT_EXIT_CODE=$?
        fi
        
        if [ $AUDIT_EXIT_CODE -eq 0 ]; then
          echo "✅ No security vulnerabilities found" >> audit-report.md
          echo "audit_status=clean" >> $GITHUB_OUTPUT
          echo "vulnerabilities_found=0" >> $GITHUB_OUTPUT
        else
          VULN_COUNT=$(jq -r '.metadata.vulnerabilities.total // 0' npm-audit.json 2>/dev/null || echo "0")
          echo "⚠️ Found $VULN_COUNT security vulnerabilities" >> audit-report.md
          echo "" >> audit-report.md
          
          # Extract vulnerability summary
          if command -v jq &> /dev/null && [ -f npm-audit.json ]; then
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' npm-audit.json)
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' npm-audit.json)
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' npm-audit.json)
            CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' npm-audit.json)
            
            echo "- 🔴 Critical: $CRITICAL" >> audit-report.md
            echo "- 🟠 High: $HIGH" >> audit-report.md
            echo "- 🟡 Moderate: $MODERATE" >> audit-report.md
            echo "- 🟢 Low: $LOW" >> audit-report.md
          fi
          
          echo "audit_status=vulnerabilities" >> $GITHUB_OUTPUT
          echo "vulnerabilities_found=$VULN_COUNT" >> $GITHUB_OUTPUT
        fi
        
        echo "" >> audit-report.md
    
    - name: Check outdated packages
      run: |
        echo "📦 Checking for outdated packages..."
        
        echo "## 📦 Outdated Packages" >> audit-report.md
        echo "" >> audit-report.md
        
        if npm outdated --json > outdated.json 2>/dev/null && [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
          echo "📋 Outdated packages found" >> audit-report.md
          echo "" >> audit-report.md
          
          # Parse outdated packages
          if command -v jq &> /dev/null; then
            OUTDATED_COUNT=$(jq 'length' outdated.json)
            echo "**Total outdated packages:** $OUTDATED_COUNT" >> audit-report.md
            echo "" >> audit-report.md
            echo "| Package | Current | Wanted | Latest |" >> audit-report.md
            echo "|---------|---------|--------|--------|" >> audit-report.md
            jq -r 'to_entries[] | "| \(.key) | \(.value.current) | \(.value.wanted) | \(.value.latest) |"' outdated.json >> audit-report.md || true
            echo "outdated_packages=$OUTDATED_COUNT" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ All packages are up to date" >> audit-report.md
          echo "outdated_packages=0" >> $GITHUB_OUTPUT
        fi
        
        echo "" >> audit-report.md
    
    - name: License compliance check
      run: |
        echo "📄 Checking license compliance..."
        
        echo "## 📄 License Compliance" >> audit-report.md
        echo "" >> audit-report.md
        
        # Install license-checker if not present
        if ! command -v license-checker &> /dev/null; then
          npm install -g license-checker
        fi
        
        # Check licenses
        if license-checker --summary --json > licenses.json 2>/dev/null; then
          echo "✅ License check completed" >> audit-report.md
          
          # Count license types
          LICENSE_COUNT=$(jq 'length' licenses.json 2>/dev/null || echo "0")
          echo "**Total unique licenses:** $LICENSE_COUNT" >> audit-report.md
          echo "" >> audit-report.md
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL" "AGPL" "LGPL" "CPAL" "EPL")
          PROBLEMATIC_FOUND=0
          
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -qi "$license" licenses.json; then
              echo "⚠️ Potentially problematic license found: $license" >> audit-report.md
              PROBLEMATIC_FOUND=1
            fi
          done
          
          if [ $PROBLEMATIC_FOUND -eq 0 ]; then
            echo "✅ No problematic licenses detected" >> audit-report.md
          fi
        else
          echo "❌ License check failed" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
    
    - name: Dependency analysis
      run: |
        echo "🔗 Analyzing dependencies..."
        
        echo "## 🔗 Dependency Analysis" >> audit-report.md
        echo "" >> audit-report.md
        
        # Count dependencies
        PROD_DEPS=$(jq '.dependencies | length' package.json 2>/dev/null || echo "0")
        DEV_DEPS=$(jq '.devDependencies | length' package.json 2>/dev/null || echo "0")
        TOTAL_DEPS=$((PROD_DEPS + DEV_DEPS))
        
        echo "- **Production dependencies:** $PROD_DEPS" >> audit-report.md
        echo "- **Development dependencies:** $DEV_DEPS" >> audit-report.md
        echo "- **Total dependencies:** $TOTAL_DEPS" >> audit-report.md
        echo "" >> audit-report.md
        
        # Check for large dependencies
        echo "### 📊 Large Dependencies (>1MB):" >> audit-report.md
        if [ -d "node_modules" ]; then
          LARGE_DEPS=$(du -sh node_modules/* 2>/dev/null | awk '$1 ~ /[0-9]+M/ && $1 !~ /^[0-9]\.[0-9]M/ {print "- " $2 ": " $1}' | head -10)
          if [ -n "$LARGE_DEPS" ]; then
            echo "$LARGE_DEPS" >> audit-report.md
          else
            echo "✅ No unusually large dependencies found" >> audit-report.md
          fi
        else
          echo "⚠️ node_modules directory not found" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
    
    - name: Performance metrics
      run: |
        echo "⚡ Collecting performance metrics..."
        
        echo "## ⚡ Performance Metrics" >> audit-report.md
        echo "" >> audit-report.md
        
        # Build size analysis
        if npm run build:prod > /dev/null 2>&1; then
          if [ -d "dist" ]; then
            BUILD_SIZE=$(du -sh dist/ 2>/dev/null | cut -f1 || echo "Unknown")
            echo "- **Production build size:** $BUILD_SIZE" >> audit-report.md
            
            # Count files
            JS_FILES=$(find dist/ -name "*.js" 2>/dev/null | wc -l || echo "0")
            CSS_FILES=$(find dist/ -name "*.css" 2>/dev/null | wc -l || echo "0")
            
            echo "- **JavaScript files:** $JS_FILES" >> audit-report.md
            echo "- **CSS files:** $CSS_FILES" >> audit-report.md
          else
            echo "⚠️ Build directory not found" >> audit-report.md
          fi
        else
          echo "❌ Build failed - unable to analyze build size" >> audit-report.md
        fi
        
        echo "" >> audit-report.md
        
        # Add recommendations section
        echo "## 🎯 Recommendations" >> audit-report.md
        echo "" >> audit-report.md
        
        AUDIT_STATUS="${{ steps.audit.outputs.audit_status }}"
        if [ "$AUDIT_STATUS" = "vulnerabilities" ]; then
          echo "### 🚨 Security Actions Required:" >> audit-report.md
          echo "1. **Run \`npm audit fix\`** to automatically fix vulnerabilities" >> audit-report.md
          echo "2. **Review remaining vulnerabilities** manually" >> audit-report.md
          echo "3. **Consider updating major versions** of vulnerable packages" >> audit-report.md
          echo "4. **Monitor security advisories** for your dependencies" >> audit-report.md
        else
          echo "### ✅ Maintenance Recommendations:" >> audit-report.md
          echo "1. **Keep dependencies updated** regularly" >> audit-report.md
          echo "2. **Review and clean unused dependencies**" >> audit-report.md
          echo "3. **Monitor license compliance** for new packages" >> audit-report.md
          echo "4. **Optimize large dependencies** if possible" >> audit-report.md
        fi
    
    - name: Upload audit artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report-${{ github.run_number }}
        path: |
          audit-report.md
          npm-audit.json
          outdated.json
          licenses.json
        retention-days: 30

  auto-fix:
    name: 🔧 Auto-fix Dependencies
    runs-on: ubuntu-latest
    needs: [comprehensive-audit]
    if: github.event.inputs.force_update == 'true' && needs.comprehensive-audit.outputs.audit-status == 'vulnerabilities'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline
    
    - name: Auto-fix vulnerabilities
      run: |
        echo "🔧 Attempting to auto-fix dependencies..."
        
        # Create a new branch for fixes
        BRANCH_NAME="automated-security-fixes-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Try to fix vulnerabilities
        if npm audit fix --force; then
          # Check if there are changes
          if git diff --quiet; then
            echo "No changes made by npm audit fix"
          else
            # Commit changes
            git add package*.json
            git commit -m "🔒 Auto-fix security vulnerabilities
            
            - Applied npm audit fix
            - Automated security maintenance
            - Generated by scheduled audit workflow"
            
            # Push branch
            git push origin $BRANCH_NAME
            
            # Create PR using GitHub CLI
            gh pr create \
              --title "🔒 Automated Security Fixes" \
              --body "This PR contains automated security fixes generated by the scheduled audit workflow.
              
              **Changes:**
              - Applied \`npm audit fix\`
              - Updated vulnerable dependencies
              
              **Audit Results:**
              - Vulnerabilities found: ${{ needs.comprehensive-audit.outputs.vulnerabilities-found }}
              - Outdated packages: ${{ needs.comprehensive-audit.outputs.outdated-packages }}
              
              **Please review and test before merging.**" \
              --label "security,automated" \
              --base main
          fi
        else
          echo "❌ npm audit fix failed - manual intervention required"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  discord-notification:
    name: 📢 Send Discord Report
    runs-on: ubuntu-latest
    needs: [comprehensive-audit, auto-fix]
    if: always()
    
    steps:
    - name: Download audit artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: security-audit-report-*
        merge-multiple: true
      continue-on-error: true
    
    - name: Prepare Discord notification
      id: prepare
      run: |
        # Get audit results
        AUDIT_STATUS="${{ needs.comprehensive-audit.outputs.audit-status }}"
        VULNERABILITIES="${{ needs.comprehensive-audit.outputs.vulnerabilities-found }}"
        OUTDATED="${{ needs.comprehensive-audit.outputs.outdated-packages }}"
        
        # Set status emoji and color based on audit results
        case "$AUDIT_STATUS" in
          "vulnerabilities")
            STATUS_EMOJI="🚨"
            STATUS_COLOR="15158332"  # Red
            STATUS_TEXT="Security Issues Found"
            ;;
          "clean")
            STATUS_EMOJI="✅"
            STATUS_COLOR="3066993"   # Green
            STATUS_TEXT="Security Clean"
            ;;
          *)
            STATUS_EMOJI="📊"
            STATUS_COLOR="7506394"   # Blue
            STATUS_TEXT="Audit Completed"
            ;;
        esac
        
        echo "status_emoji=$STATUS_EMOJI" >> $GITHUB_OUTPUT
        echo "status_color=$STATUS_COLOR" >> $GITHUB_OUTPUT
        echo "status_text=$STATUS_TEXT" >> $GITHUB_OUTPUT
        echo "vulnerabilities=$VULNERABILITIES" >> $GITHUB_OUTPUT
        echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT
        
        # Read audit report content if available
        REPORT_SUMMARY="Audit completed successfully"
        if [ -f "audit-report.md" ]; then
          # Extract key sections from the report
          REPORT_SUMMARY=$(head -20 audit-report.md | tail -15 | grep -v "^#" | grep -v "^$" | head -5 | paste -sd "\\n" -)
        fi
        
        echo "report_summary<<EOF" >> $GITHUB_OUTPUT
        echo "$REPORT_SUMMARY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Send Discord notification
      uses: actions/github-script@v6
      with:
        script: |
          const webhook_url = "https://discord.com/api/webhooks/1403080159539757086/jPd738BY7oID9oQSH4VCmb3taAlJjOi_rFZZPXGztWkirhMwnqB-IwjuWnTqfS3ReZ6r";
          
          // Get step outputs
          const statusEmoji = "${{ steps.prepare.outputs.status_emoji }}";
          const statusColor = parseInt("${{ steps.prepare.outputs.status_color }}");
          const statusText = "${{ steps.prepare.outputs.status_text }}";
          const vulnerabilities = "${{ steps.prepare.outputs.vulnerabilities }}";
          const outdated = "${{ steps.prepare.outputs.outdated }}";
          const auditLevel = "${{ github.event.inputs.audit_level || 'moderate' }}";
          const forceUpdate = "${{ github.event.inputs.force_update || 'false' }}";
          const reportSummary = `${{ steps.prepare.outputs.report_summary }}`;
          
          // Build recommendations based on audit status
          const auditStatus = "${{ needs.comprehensive-audit.outputs.audit-status }}";
          let recommendations = [];
          
          if (auditStatus === "vulnerabilities") {
            recommendations = [
              "🔒 **Run npm audit fix** - Apply automatic fixes",
              "🔍 **Review vulnerabilities** - Check each security issue",
              "📦 **Update dependencies** - Upgrade to secure versions",
              "🛡️ **Monitor advisories** - Set up security alerts",
              "🧪 **Test thoroughly** - Verify fixes don't break functionality"
            ];
          } else if (outdated > 0) {
            recommendations = [
              "📦 **Update packages** - Keep dependencies current",
              "🧹 **Clean unused deps** - Remove unnecessary packages",
              "📄 **Check licenses** - Ensure compliance",
              "⚡ **Optimize bundles** - Review large dependencies"
            ];
          } else {
            recommendations = [
              "✅ **Maintain vigilance** - Continue regular audits",
              "📊 **Monitor metrics** - Track dependency health",
              "🔄 **Schedule reviews** - Regular maintenance checks",
              "📚 **Update docs** - Keep security practices current"
            ];
          }
          
          const embed = {
            title: `${statusEmoji} Security Audit Report`,
            description: `**Status:** ${statusText}\n**Repository:** ${context.repo.owner}/${context.repo.repo}`,
            color: statusColor,
            timestamp: new Date().toISOString(),
            fields: [
              {
                name: "🔍 Audit Results",
                value: `**Vulnerabilities:** ${vulnerabilities || '0'}\n**Outdated Packages:** ${outdated || '0'}\n**Audit Level:** ${auditLevel}\n**Auto-fix:** ${forceUpdate === 'true' ? 'Enabled' : 'Disabled'}`,
                inline: true
              },
              {
                name: "📊 Status Summary",
                value: auditStatus === "vulnerabilities" 
                  ? `🚨 **Action Required**\nSecurity vulnerabilities detected` 
                  : auditStatus === "clean"
                  ? `✅ **All Clear**\nNo security issues found`
                  : `📋 **Review Complete**\nAudit finished successfully`,
                inline: true
              },
              {
                name: "⏰ Schedule Info",
                value: `**Next Audit:** Every Monday 2AM UTC\n**Workflow:** #${{ github.run_number }}\n**Trigger:** ${context.eventName === 'schedule' ? 'Scheduled' : 'Manual'}`,
                inline: true
              }
            ],
            footer: {
              text: "Security Audit • Automated Maintenance",
              icon_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
            }
          };
          
          // Add recommendations field
          if (recommendations.length > 0) {
            embed.fields.push({
              name: "🎯 Recommended Actions",
              value: recommendations.slice(0, 5).join("\n"),
              inline: false
            });
          }
          
          // Add status indicators based on results
          const statusIndicators = [];
          if (auditStatus === "vulnerabilities") {
            statusIndicators.push("🚨 Security vulnerabilities require attention");
            if (forceUpdate === 'true') {
              statusIndicators.push("🔧 Auto-fix attempted");
            }
          } else {
            statusIndicators.push("✅ No critical security issues detected");
          }
          
          if (statusIndicators.length > 0) {
            embed.fields.push({
              name: "🔔 Status Alerts",
              value: statusIndicators.join("\n"),
              inline: false
            });
          }
          
          // Add quick actions
          const quickActions = [
            `[📊 View Audit Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`,
            `[📋 Download Report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}#artifacts)`,
            `[🔒 Security Tab](https://github.com/${context.repo.owner}/${context.repo.repo}/security)`
          ];
          
          embed.fields.push({
            name: "🔗 Quick Actions",
            value: quickActions.join(" • "),
            inline: false
          });
          
          const payload = {
            username: "Security Audit Bot",
            avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            embeds: [embed]
          };
          
          try {
            const response = await fetch(webhook_url, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(payload)
            });
            
            if (!response.ok) {
              throw new Error(`Discord webhook failed: ${response.status} ${response.statusText}`);
            }
            
            console.log("✅ Discord notification sent successfully");
          } catch (error) {
            console.error("❌ Failed to send Discord notification:", error);
            core.setFailed(`Discord notification failed: ${error.message}`);
          }
