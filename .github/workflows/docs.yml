name: Documentation Workflow

on:
  push:
    branches: [ main, develop ]
    paths:
      - '*.md'
      - 'docs/**'
      - 'Upgrade/**'
      - '.github/workflows/docs.yml'
  pull_request:
    paths:
      - '*.md'
      - 'docs/**'
      - 'Upgrade/**'

permissions:
  contents: read
  pull-requests: write

jobs:
  docs-validation:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check.json'
        check-modified-files-only: 'yes'
        base-branch: 'main'
    
    - name: Validate markdown format
      run: |
        echo "📝 Validating markdown format..."
        
        # Check for common markdown issues
        find . -name "*.md" -not -path "./node_modules/*" | while read file; do
          echo "Checking: $file"
          
          # Check for trailing spaces
          if grep -q '[[:space:]]$' "$file"; then
            echo "⚠️ Warning: Trailing spaces found in $file"
          fi
          
          # Check for missing alt text in images
          if grep -q '!\[\](' "$file"; then
            echo "⚠️ Warning: Images without alt text found in $file"
          fi
          
          # Check for proper heading structure
          if grep -q '^#\{7,\}' "$file"; then
            echo "⚠️ Warning: Heading levels too deep (>6) in $file"
          fi
        done
        
        echo "✅ Markdown validation completed"
    
    - name: Generate documentation metrics
      run: |
        echo "📊 Documentation Metrics:"
        
        # Count documentation files
        MD_COUNT=$(find . -name "*.md" -not -path "./node_modules/*" | wc -l)
        echo "- Total markdown files: $MD_COUNT"
        
        # Calculate total documentation size
        DOC_SIZE=$(find . -name "*.md" -not -path "./node_modules/*" -exec cat {} \; | wc -c)
        DOC_SIZE_KB=$((DOC_SIZE / 1024))
        echo "- Total documentation size: ${DOC_SIZE_KB}KB"
        
        # Count words in documentation
        WORD_COUNT=$(find . -name "*.md" -not -path "./node_modules/*" -exec cat {} \; | wc -w)
        echo "- Total word count: $WORD_COUNT words"
        
        # Check README completeness
        if [ -f "README.md" ]; then
          echo "✅ README.md exists"
          
          # Check for essential sections
          if grep -qi "installation" README.md; then
            echo "✅ Installation section found"
          else
            echo "⚠️ Installation section missing"
          fi
          
          if grep -qi "usage" README.md; then
            echo "✅ Usage section found"
          else
            echo "⚠️ Usage section missing"
          fi
          
          if grep -qi "contributing" README.md; then
            echo "✅ Contributing section found"
          else
            echo "💡 Consider adding a Contributing section"
          fi
        else
          echo "❌ README.md not found"
        fi
    
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get changed files
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const changedMdFiles = files
            .filter(file => file.filename.endsWith('.md'))
            .map(file => file.filename);
          
          if (changedMdFiles.length > 0) {
            const comment = `📚 **Documentation Changes Detected**
            
            The following documentation files were modified:
            ${changedMdFiles.map(file => `- \`${file}\``).join('\n')}
            
            ✅ All documentation checks passed!
            
            ---
            *This comment was automatically generated by the documentation workflow.*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  docs-build:
    name: 🏗️ Documentation Build Test
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[docs-build]') || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --prefer-offline
    
    - name: Test documentation build
      run: |
        echo "🏗️ Testing documentation build..."
        
        # If using a documentation generator like VitePress, Docusaurus, etc.
        # npm run docs:build
        
        # For now, just validate that all referenced files exist
        echo "📋 Validating file references in documentation..."
        
        find . -name "*.md" -not -path "./node_modules/*" | while read file; do
          # Check for broken relative links to files
          grep -o '\[.*\]([^)]*\.\(ts\|tsx\|js\|jsx\|json\|yml\|yaml\))' "$file" | while read link; do
            filepath=$(echo "$link" | sed 's/.*](\([^)]*\)).*/\1/')
            if [[ "$filepath" != http* ]] && [[ "$filepath" != "#"* ]]; then
              if [ ! -f "$filepath" ]; then
                echo "⚠️ Warning: Referenced file not found: $filepath in $file"
              fi
            fi
          done
        done
        
        echo "✅ Documentation build test completed"