name: Legacy CI/CD Pipeline (Deprecated)

# ‚ö†Ô∏è DEPRECATED: This workflow is being replaced by smart-ci.yml
# This file is kept for backward compatibility and will be removed in future versions
# Please use the new Smart CI/CD Pipeline for better performance and features

on:
  # Temporarily disabled - using smart-ci.yml instead
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main, develop ]
  
  # Manual trigger only for legacy compatibility
  workflow_dispatch:
    inputs:
      force_legacy:
        description: 'Force run legacy pipeline'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  CACHE_VERSION: v2  # Updated cache version

permissions:
  contents: write
  packages: write
  pull-requests: write
  checks: write

jobs:
  legacy-notice:
    name: üì¢ Legacy Pipeline Notice
    runs-on: ubuntu-latest
    if: github.event.inputs.force_legacy != 'true'
    
    steps:
    - name: Legacy pipeline notice
      run: |
        echo "‚ö†Ô∏è **NOTICE: Legacy CI/CD Pipeline**"
        echo ""
        echo "This workflow has been deprecated and replaced with:"
        echo "- üöÄ **smart-ci.yml** - Optimized CI/CD with intelligent path filtering"
        echo "- üìö **docs.yml** - Specialized documentation workflow"
        echo "- üîí **scheduled-audit.yml** - Automated security audits"
        echo "- üìä **performance-monitoring.yml** - Performance tracking"
        echo "- üóÑÔ∏è **cache-management.yml** - Cache optimization"
        echo ""
        echo "**Benefits of new workflows:**"
        echo "- 60-70% faster execution for small changes"
        echo "- Intelligent path filtering"
        echo "- Better resource utilization"
        echo "- Specialized workflows for different purposes"
        echo ""
        echo "**Migration Status:** ‚úÖ New workflows are active"
        echo "**Removal Timeline:** This legacy workflow will be removed in 30 days"
        echo ""
        echo "To force run this legacy pipeline, use workflow_dispatch with force_legacy=true"
        
        exit 1  # Fail to prevent accidental usage

  # Job 1: Testes e Qualidade de C√≥digo (Legacy)
  test:
    name: üß™ Legacy Tests & Code Quality
    runs-on: ubuntu-latest
    if: github.event.inputs.force_legacy == 'true'
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: ‚ö†Ô∏è Legacy pipeline warning
      run: |
        echo "‚ö†Ô∏è Running LEGACY CI/CD Pipeline"
        echo "Consider migrating to smart-ci.yml for better performance"
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run tests
      run: npm run test:run
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  # Job 2: Build e Verifica√ß√£o (Legacy)
  build:
    name: üèóÔ∏è Legacy Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.event.inputs.force_legacy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Job 3: Auditoria de Seguran√ßa (Legacy)
  security:
    name: üîí Legacy Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.force_legacy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Check for outdated packages
      run: npm outdated || true

  # Job 4: Deploy para Staging (Legacy - apenas em push para develop)
  deploy-staging:
    name: üöÄ Legacy Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event.inputs.force_legacy == 'true' && github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for staging
      run: npm run build:dev
      env:
        VITE_API_URL: ${{ secrets.STAGING_API_URL }}
        VITE_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
    
    - name: Deploy to Vercel (Staging)
      id: deploy
      run: |
        # Disable Vercel telemetry to avoid output issues
        export VERCEL_TELEMETRY_DISABLED=1
        DEPLOY_OUTPUT=$(npx vercel --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --confirm 2>&1)
        echo "$DEPLOY_OUTPUT" | grep -v "telemetry" || true
        DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^[:space:]]*' | head -1)
        if [ -n "$DEPLOY_URL" ]; then
          echo "staging_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to staging: $DEPLOY_URL"
        fi
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Job 5: Deploy para Produ√ß√£o (Legacy - apenas em push para main)
  deploy-production:
    name: üöÄ Legacy Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.event.inputs.force_legacy == 'true' && github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build:prod
      env:
        VITE_API_URL: ${{ secrets.PRODUCTION_API_URL }}
        VITE_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}
    
    - name: Deploy to Vercel (Production)
      id: deploy
      run: |
        # Disable Vercel telemetry to avoid output issues
        export VERCEL_TELEMETRY_DISABLED=1
        DEPLOY_OUTPUT=$(npx vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} --confirm 2>&1)
        echo "$DEPLOY_OUTPUT" | grep -v "telemetry" || true
        DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep -o 'https://[^[:space:]]*' | head -1)
        if [ -n "$DEPLOY_URL" ]; then
          echo "production_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to production: $DEPLOY_URL"
        fi
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          Automated release from main branch

          Changes in this release:
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}

  # Job 6: Notifica√ß√µes (Legacy)
  notify:
    name: üì¢ Legacy Notify Results
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: always() && github.event.inputs.force_legacy == 'true'
    
    steps:
    - name: Notify Success
      if: needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success'
      run: |
        echo "‚úÖ Pipeline executado com sucesso!"
        echo "- Testes: ‚úÖ Passou"
        echo "- Build: ‚úÖ Passou"
        echo "- Seguran√ßa: ‚úÖ Passou"
    
    - name: Notify Failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "‚ùå Pipeline falhou!"
        echo "- Testes: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Seguran√ßa: ${{ needs.security.result }}"
        exit 1