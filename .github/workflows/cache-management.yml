name: Cache Management & Optimization

on:
  schedule:
    # Limpa cache antigo toda sexta-feira √†s 3h UTC
    - cron: '0 3 * * 5'
  workflow_dispatch:
    inputs:
      action:
        description: 'Cache action to perform'
        required: true
        default: 'cleanup'
        type: choice
        options:
          - cleanup
          - rebuild
          - analyze
          - purge
      cache_type:
        description: 'Type of cache to manage'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - npm
          - build
          - test
          - eslint

permissions:
  contents: read
  actions: write

jobs:
  cache-analysis:
    name: üìä Cache Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'analyze' || github.event.inputs.action == 'cleanup'
    
    outputs:
      cache-stats: ${{ steps.analyze.outputs.cache-stats }}
      cleanup-needed: ${{ steps.analyze.outputs.cleanup-needed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Analyze cache usage
      id: analyze
      run: |
        echo "üìä Analyzing cache usage patterns..."
        
        # Create cache analysis report
        echo "# Cache Analysis Report - $(date)" > cache-report.md
        echo "" >> cache-report.md
        
        # Simulate cache analysis (GitHub doesn't provide direct cache APIs)
        echo "## Cache Statistics" >> cache-report.md
        echo "" >> cache-report.md
        
        # Estimate cache sizes based on typical patterns
        echo "### Estimated Cache Sizes:" >> cache-report.md
        echo "- NPM Cache: ~200-500MB" >> cache-report.md
        echo "- Build Cache: ~100-300MB" >> cache-report.md
        echo "- ESLint Cache: ~10-50MB" >> cache-report.md
        echo "- Test Cache: ~50-150MB" >> cache-report.md
        echo "" >> cache-report.md
        
        # Check for cache keys that might be stale
        echo "### Cache Key Patterns:" >> cache-report.md
        echo "- Node modules: \`node-modules-\${{ runner.os }}-\${{ hashFiles('**/package-lock.json') }}\`" >> cache-report.md
        echo "- Build cache: \`build-cache-\${{ runner.os }}-\${{ github.sha }}\`" >> cache-report.md
        echo "- ESLint cache: \`eslint-cache-\${{ runner.os }}-\${{ hashFiles('**/*.js', '**/*.ts', '**/*.tsx') }}\`" >> cache-report.md
        echo "" >> cache-report.md
        
        # Recommendations
        echo "### Recommendations:" >> cache-report.md
        echo "- ‚úÖ Use content-based cache keys for better hit rates" >> cache-report.md
        echo "- ‚úÖ Implement cache fallback strategies" >> cache-report.md
        echo "- ‚úÖ Regular cleanup of stale caches (weekly)" >> cache-report.md
        echo "- ‚úÖ Monitor cache hit rates in workflows" >> cache-report.md
        
        # Set outputs
        echo "cache-stats=analyzed" >> $GITHUB_OUTPUT
        echo "cleanup-needed=true" >> $GITHUB_OUTPUT
    
    - name: Upload cache analysis
      uses: actions/upload-artifact@v4
      with:
        name: cache-analysis-${{ github.run_number }}
        path: cache-report.md
        retention-days: 7

  cache-optimization:
    name: üöÄ Cache Optimization
    runs-on: ubuntu-latest
    needs: [cache-analysis]
    if: always() && (github.event.inputs.action == 'rebuild' || github.event.inputs.action == 'cleanup')
    
    strategy:
      matrix:
        cache-type: 
          - npm
          - build
          - eslint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Optimize NPM cache
      if: matrix.cache-type == 'npm' && (github.event.inputs.cache_type == 'all' || github.event.inputs.cache_type == 'npm')
      run: |
        echo "üì¶ Optimizing NPM cache..."
        
        # Create optimized cache key
        CACHE_KEY="node-modules-optimized-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}"
        echo "Cache key: $CACHE_KEY"
        
        # Restore existing cache
        echo "Attempting to restore cache..."
        
        # Install dependencies with cache optimization
        npm ci --prefer-offline --no-audit --progress=false
        
        # Clean npm cache
        npm cache clean --force
        
        echo "‚úÖ NPM cache optimized"
    
    - name: Cache NPM dependencies
      if: matrix.cache-type == 'npm'
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: node-modules-optimized-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          node-modules-optimized-${{ runner.os }}-
          node-modules-${{ runner.os }}-
    
    - name: Optimize Build cache
      if: matrix.cache-type == 'build' && (github.event.inputs.cache_type == 'all' || github.event.inputs.cache_type == 'build')
      run: |
        echo "üèóÔ∏è Optimizing Build cache..."
        
        # Create build cache directories
        mkdir -p .cache/build
        mkdir -p .cache/webpack
        mkdir -p .cache/typescript
        
        # Run optimized build
        npm run build:prod
        
        # Store build artifacts in cache directory
        cp -r dist/ .cache/build/ 2>/dev/null || true
        
        echo "‚úÖ Build cache optimized"
    
    - name: Cache Build artifacts
      if: matrix.cache-type == 'build'
      uses: actions/cache@v3
      with:
        path: |
          .cache/build
          .cache/webpack
          .cache/typescript
          dist
        key: build-cache-optimized-${{ runner.os }}-${{ github.sha }}
        restore-keys: |
          build-cache-optimized-${{ runner.os }}-
          build-cache-${{ runner.os }}-
    
    - name: Optimize ESLint cache
      if: matrix.cache-type == 'eslint' && (github.event.inputs.cache_type == 'all' || github.event.inputs.cache_type == 'eslint')
      run: |
        echo "üîç Optimizing ESLint cache..."
        
        # Create ESLint cache directory
        mkdir -p .cache/eslint
        
        # Run ESLint with cache
        npm run lint -- --cache --cache-location .cache/eslint/
        
        echo "‚úÖ ESLint cache optimized"
    
    - name: Cache ESLint
      if: matrix.cache-type == 'eslint'
      uses: actions/cache@v3
      with:
        path: .cache/eslint
        key: eslint-cache-optimized-${{ runner.os }}-${{ hashFiles('**/*.js', '**/*.ts', '**/*.tsx', '.eslintrc*') }}
        restore-keys: |
          eslint-cache-optimized-${{ runner.os }}-
          eslint-cache-${{ runner.os }}-

  cache-purge:
    name: üóëÔ∏è Cache Purge
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'purge'
    
    steps:
    - name: Purge old caches
      run: |
        echo "üóëÔ∏è Purging old caches..."
        echo "Note: GitHub Actions doesn't provide direct cache deletion APIs"
        echo "Caches will be automatically cleaned based on:"
        echo "- 7-day retention for unused caches"
        echo "- 10GB total cache limit per repository"
        echo "- LRU (Least Recently Used) eviction policy"
        
        echo "‚úÖ Cache purge completed (automatic cleanup)"

  cache-warming:
    name: üî• Cache Warming
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'rebuild'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Warm up caches
      run: |
        echo "üî• Warming up caches for better performance..."
        
        # Install dependencies (warms npm cache)
        npm ci --prefer-offline
        
        # Run build (warms build cache)
        npm run build:prod
        
        # Run linting (warms ESLint cache)
        npm run lint
        
        # Run tests (warms test cache)
        npm run test:ci
        
        echo "‚úÖ All caches warmed up successfully"
    
    - name: Cache warmed dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: node-modules-warmed-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
    
    - name: Cache warmed build
      uses: actions/cache@v3
      with:
        path: |
          dist
          .cache
        key: build-warmed-${{ runner.os }}-${{ github.sha }}

  summary:
    name: üìã Cache Management Summary
    runs-on: ubuntu-latest
    needs: [cache-analysis, cache-optimization, cache-purge, cache-warming]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "üìã **Cache Management Summary**"
        echo ""
        echo "**Action performed:** ${{ github.event.inputs.action || 'cleanup' }}"
        echo "**Cache type:** ${{ github.event.inputs.cache_type || 'all' }}"
        echo "**Timestamp:** $(date -u)"
        echo ""
        
        echo "**Jobs Status:**"
        echo "- Cache Analysis: ${{ needs.cache-analysis.result }}"
        echo "- Cache Optimization: ${{ needs.cache-optimization.result }}"
        echo "- Cache Purge: ${{ needs.cache-purge.result }}"
        echo "- Cache Warming: ${{ needs.cache-warming.result }}"
        echo ""
        
        echo "**Next Steps:**"
        echo "- Monitor cache hit rates in subsequent workflows"
        echo "- Check build performance improvements"
        echo "- Review cache usage in workflow runs"
        
        echo "**Cache Optimization Tips:**"
        echo "- Use specific cache keys based on file content hashes"
        echo "- Implement cache fallback strategies"
        echo "- Regular maintenance (weekly cleanup)"
        echo "- Monitor cache size and hit rates"